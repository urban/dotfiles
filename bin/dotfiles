#!/usr/bin/env bash
#
# Dotfiles shell script
#
# This file:
#  - Downloads the Git repo https://github.com/urban/dotfiles to ~/.dotfiles
#  - Copies all files in ~/.dotfiles/copy to ~/
#  - Symlinks all files in ~/.dotfiles/link to ~/
#
# More info:
#  - https://github.com/urban/dotfiles
#
# Author:
#  - Urban Faubion (urban.faubion@gmail.com)
#
# Licensed under MIT
# Copyright (c) 2015 Urban Faubion (urban.faubion@gmail.com)


### Configuration
#####################################################################

if [[ "${1:-}" != "" ]]; then cat <<HELP

Usage: $(basename "$0")

See the README for documentation.
https://github.com/urban/dotfiles

Copyright (c) 2015 Urban Faubion
Licensed under the MIT license.
HELP
exit;
fi

# exit on error
set -e
# exit when trying to use undeclared variables
set -u
# exit on errors in pipeline
set -o pipefail
# set Internal Field Separator for word splitting
IFS=$'\n\t'

### Constants, Variables and Functions
#####################################################################

export DOTFILES=~/.dotfiles

function log_message()  { echo -e "\n\033[1m$@\033[0m"; }
function log_success()  { echo -e " \033[1;32m✔\033[0m  $@"; }
function log_error()    { echo -e " \033[1;31m✖\033[0m  $@"; }

### Main
#####################################################################

# Finish.
function finish() {
  # Cleanup.
  local status=$?
  if [ $status != 0 ]; then
    echo -e "\033[1;31mError!"
  else
    echo -e "\033[1;32mFinished!"
  fi
}
trap finish EXIT

# Link functions.
function link_message() { log_message "Linking files into home directory"; }
function link_test() {
  [[ "$1" -ef "$2" ]] && echo "same file"
}
function link_do() {
  log_message "Link $1"
  log_success "Linking ~/$1"
  ln -sf ${2#$HOME/} ~/
}

# Copy functions
function copy_message() { log_message "Copying files into home directory"; }
function copy_test() {
  if [[ -e "$2" && ! "$(cmp "$1" "$2" 2> /dev/null)" ]]; then
    echo "same file"
  elif [[ "$1" -ot "$2" ]]; then
    echo "destination file newer"
  fi
}
function copy_do() {
  log_success "Copying ~/$1."
  cp "$2" ~/
}

# Copy, Link and etc.
function do_stuff() {
  local base dest skip
  local action=$1
  local path="${2:-$DOTFILES/$action}"
  local files=($path/*)
  # No files? abort.
  if (( ${#files[@]} == 0 )); then return; fi
  # Run _message function only if declared.
  [[ $(declare -f $action'_message') ]] && $action'_message'
  # Iterate over files.
  for file in "${files[@]}"; do
    base="$(basename $file)"
    dest="$HOME/$base"
    # Run _test function only if declared.
    if [[ $(declare -f $action'_test') ]]; then
      # If link_test function returns a string, skip file and print that message.
      skip="$($action'_test' "$file" "$dest")"
      if [[ "$skip" ]]; then
        log_error "Skipping ~/$base, $skip."
        continue
      fi
    fi
    # Run _do function only if declared
    [[ $(declare -f $action'_do') ]] && $action'_do' "$base" "$file"
  done
}

# Ensure that we can actually compile anything.
if [[ ! "$(type -P gcc)" ]] && is_osx; then
  log_error "XCode or the Command Line Tools for XCode must be installed first."
  exit 1
fi

# If Git isn't installed, quit!
if [[ ! "$(type -P git)" ]]; then
  log_error "Git should be installed. It isn't. Aborting."
  exit 1
fi

# Initialize dotfiles repo
if [[ ! -d $DOTFILES ]]; then
  log_message "Creating ~/.dotfiles directory."
  git clone --recursie git://github.com/${github_user:-urban}/dotfiles.git $DOTFILES
  cd $DOTFILES
elif [[ "${1-}" != "restart" ]]; then
  # Make sure we have the latest files
  log_message "Updating dotfiles"
  cd $DOTFILES
  prev_head="$(git rev-parse HEAD)"
  git pull
  # Restart script if new version
  if [[ "$(git rev-parse HEAD)" != "$prev_head" ]]; then
    log_message "Changes detected, restarting script"
    exec "$0" "restart"
  fi
fi

# Add binaries into path
[[ -d $DOTFILES/bin ]] && PATH=$DOTFILES/bin:$PATH
export PATH

# Tweak file globbing.
shopt -s dotglob
shopt -s nullglob

# Copy, Link, etc.
do_stuff "link"
do_stuff "copy"
